.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Sew::Color 3pm"
.TH Sew::Color 3pm "2012-12-24" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\& Sew:Color \- rgb colours for various manufactures of coloured embroidery thread.
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
.Vb 2
\&  Extensible Module for determining rgb colours of various manufacturers of embroidering thread 
\&  and the codes that go with them.
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use Sew::Color
\& my @rgb=rgb(\*(AqBrother\*(Aq, \*(Aq502\*(Aq); 
\& my $name=name(\*(AqBrother\*(Aq,\*(Aq502\*(Aq); 
\&
\& print "$name (@rgb)\en"; 
\& my @m=manlist();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 5
\& These calls return respectively the red green and blue components of the colour of the thread 
\& and the \*(AqEnglish\*(Aq name of the thread colour. The colour components will be in the range 0 to 255. 
\& In this case, Brother thread number 502. 
\& Be aware that the name of the thread colour is not unique, there are some codes that have 
\& the same name, although they are mostly different. 
\&
\& The above code prints out 
\&    
\&    Mint Green (148 190 140) 
\&
\& code(Manufacturer,red,green.blue)
\&
\& This function does a simple search in the colour space to find the colour that is closest to the rgb values you provide. 
\&
\& The parameters are
\&
\&   Manufacturer: Can be a single manufacturer, a comma seperated list or an array reference of manufacturers. 
\&                                 It can be empty to search all known about. 
\&   red, green, blue are the colour co\-ordinates to search for. Distnce is done through a very simple sequential search
\&                 using a simple 3\-d colour model without any weightings. (so rgb all treated the same.) 
\&
\& The return values are: 
\&
\&        In a scalar context, just the code, for example \*(Aq502\*(Aq. 
\&        In an array context it returns a 3 element array, with the following entries
\&
\&                Thread code, eg \*(Aq502\*(Aq
\&                Manufacturer, eg \*(AqBrother\*(Aq 
\&                Error distance, eg 42. This is the distance in linear units scaled to 255 
\&                between the thread found and the desired colour. Note that it can be more than 255
\&                (Consider that the diagonal of a cube with side 255 is more than 255. ) but will normally 
\&                not be.
\&
\&     Note that only one result is returned, and this ought tobe changed, all nearest results should be found.
.Ve
.PP
The function \fImanlist()\fR returns an array of the names of the manufacturers supported.
.SS "Custom Searches"
.IX Subsection "Custom Searches"
.Vb 2
\& If you only have certain threads that you want to search (you dont happen to have the full Madeira
\& in your store cupboard!) you can say which ones you do have by using the custom function. This is called as follows
\&
\&   custom(\*(AqManufacturer\*(Aq,list of codes, \*(AqManufacturer\*(Aq, list of codes ) 
\&
\& A call to the code function with the special string \*(Aqcustom\*(Aq as manufacturer will search only these threads. 
\&
\&   custom() 
\&
\& will reset all the custom threads. 
\&
\& Multiple calls to custom where the argument list is not empty will add each new set to the custom search list. 
\&
\& The special keyword all may be used with the custom function to either add all the threads for a manufacturer, or to add all threads of all manufacturers. so custom(\*(AqBrother\*(Aq,\*(Aqall\*(Aq) would add all Brother threads, while custom(\*(Aqall\*(Aq) would add all known threads. Once added individual threads or sets can be removed with the custom_sub function. 
\&
\& custom_sub() takes parameters similar to custom and will remove specific threads from the custom search list.
.Ve
.SS "Methods"
.IX Subsection "Methods"
.Vb 4
\&                rgb(Manufacturer, code) returns a 255\-max scaled rgb tripplet. 
\&                name(Manufacturer,code) returns the "English" name of the colour. 
\&                code(Manufacturer\-list,r,g,b)  returns either the code or an array 
\&                                                                with the following: (Manufacturer,code,error distance)
.Ve
.SH "CAVEAT"
.IX Header "CAVEAT"
.Vb 6
\& All should be aware that giving an rgb value for a thread colour will never be anything more than an approximation at best, even assuming 
\& the values are right. Be aware that many thread manufacturers give or sell colour cards that have actual samples of the thread on, because even 
\& using paint on paper has proved so unsatisfactory. Really I cannot say it loud enough, trying to represent real\-world colours that are not 
\& a photograph, using rgb values is massively approximate at best. For example, it depends on the angle of the light, the amount of 
\& light, the type of light and other factors. Or it may not. I have seen materials that change colour quite noticibly depending on weather they 
\& are viewed by sunlight, incandescent light or flourscent light. Its a manufacturers nightmare, but it happens.
.Ve
.SH "PROCESS"
.IX Header "PROCESS"
.Vb 2
\& In the main these values were derived by me by taking a web page which has a photograph of the thread, cropping it to remove anything like a shadow, 
\& changing the size to 1 by 1 pixcel (so that all other pixcels are averaged) and then listing the colour of that pixcel. 
\&
\& This results in rather real\-world values \- the extreme ends of the scale near 0 and 255 do not appear and the colours are a bit less saturated than...
\& well then you might think. 
\&
\& Sulky helpfully provide a spreadsheet with rgb values. It would be a bit silly not to use it, wouldnt it? But the truth is that the values 
\& you get are very different since they have clearly been normalised in some way so that blacks are fully black and whites are fully white. 
\&
\& For example, Sulky "Black" 942\-1005 has rgb values (0,0,0) in the spreadsheet. But using the other method, has rgb values (44,42,44). 
\&
\& Which is right? The answer is of course that both are, and you need to use the values obtained carefully and sensibly, processing them if needed. 
\&
\& Sulky do this (perhaps) because in part you are throwing away some of the precision in your 8 bit representation if you say the lowest value 
\& I am going to have is 42. They are (probably) not happy using 8 bits any way, because from there perspective this is not much precision to 
\& represent a world of colour, why throw some of it away?  
\&
\& Which Sulky values did I include? In the end I included the real\-world values since thats more compatible with the other manufacturers in the 
\& package. Let me know if you think I should do other wise. It also allows me to easily include varigated threads (that have a delibneratly 
\& variable colour along its length) since this will be correctly averaged.
.Ve
.SS "\s-1EXTENSION\s0"
.IX Subsection "EXTENSION"
The module may be extended to a new manufacturer by adding lines of the following format to the module:
.PP
manufacturer,english name,code,red,green,blue
.PP
for example the line 
      Brother,Moss Green,515,48,125,38
.PP
is responsible for the Moss Green number 515 entry.
.SH "BUGS and the like"
.IX Header "BUGS and the like"
.Vb 1
\& There are many manufacturers not covered. 
\&
\& If you use this please drop me an email to say it has been useful (or not) to you.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\& Mark Winder June 2012. 
\& markwin (at) cpan.org
.Ve
